// Code generated by go-bindata.
// sources:
// templates/editorconfig.tpl
// templates/gitignore.tpl
// templates/makefile.tpl
// templates/vscode-settings.tpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesEditorconfigTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\xb1\xaa\x02\x41\x0c\x85\xe1\x3e\x4f\x11\xb8\xdd\x2d\xdc\xc6\x4a\xf0\x29\x2c\x45\x86\xd5\x39\xd9\x0d\x8c\x89\x64\x22\xa2\x4f\x2f\x23\x62\x79\xfe\x0f\xce\x1f\x1f\x00\x5e\x33\x6f\xbb\x69\x42\xd5\xf4\xb8\xb8\x89\x2e\x1b\x8f\x85\xc5\x83\xaf\x1e\x60\x35\x71\x76\xe3\x5c\xb5\xb3\x68\x03\x51\xb8\x27\xef\x39\xe3\x0e\xa2\xe3\xff\x89\xd4\x2a\x2c\x4b\xcf\x67\xc3\x80\xf9\xfc\x4b\xfa\x1a\x65\x4b\xb0\x5a\x5c\x4a\x53\x1b\xbb\x09\xa9\x75\x44\x16\x51\x9b\x5b\x31\x3c\xbe\xf2\x39\x7d\x07\x00\x00\xff\xff\xb8\x6c\x50\x7b\x9b\x00\x00\x00")

func templatesEditorconfigTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEditorconfigTpl,
		"templates/editorconfig.tpl",
	)
}

func templatesEditorconfigTpl() (*asset, error) {
	bytes, err := templatesEditorconfigTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/editorconfig.tpl", size: 155, mode: os.FileMode(420), modTime: time.Unix(1506539637, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGitignoreTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8a\x4d\x0a\x02\x31\x0c\x85\xf7\xb9\x85\xdb\x01\xe3\x25\xbc\xc1\x1c\x60\x90\xf6\x51\x2b\x9a\x07\x4d\x0c\x7a\x7b\x41\x1d\xba\x7a\x3f\xdf\xa7\xe9\x85\x15\xa7\x45\x0e\x7b\xc5\x2b\x60\xde\x69\xae\x37\xa7\x4d\xe0\x88\xe8\xd6\xfe\x77\xc2\x2a\x87\x6c\xbf\x3c\x2e\x52\x98\x18\x97\x06\xbd\xc6\xe3\x3e\xd7\x57\x6e\x2c\xb4\xc4\x5b\xf9\x0c\xd1\xf3\xba\xad\xc1\x01\xf9\x04\x00\x00\xff\xff\xa4\x79\xe9\xf1\x7e\x00\x00\x00")

func templatesGitignoreTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesGitignoreTpl,
		"templates/gitignore.tpl",
	)
}

func templatesGitignoreTpl() (*asset, error) {
	bytes, err := templatesGitignoreTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gitignore.tpl", size: 126, mode: os.FileMode(420), modTime: time.Unix(1506541684, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMakefileTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\x51\x4b\xeb\x4a\x10\xc7\x9f\xdd\x4f\x31\x18\x2f\xb5\x60\x93\xfb\x70\x9f\x02\x3e\xc8\x55\xf4\x22\x5a\xf1\xca\x81\xf3\x74\x58\x93\x49\xb2\x76\xb2\x13\x76\x67\x5b\x4b\xc9\x77\x3f\x6c\x52\x5b\x91\x23\x07\x7b\xfa\x90\xb2\x3b\xff\x99\xff\x74\xe6\xd7\x24\xb3\x2f\x7e\x54\xa2\x92\x23\x8f\x12\x3a\x40\xbb\x34\x8e\x6d\x8b\x56\xe2\xed\x97\x2b\x29\x7c\xed\xd8\x09\x5c\xcf\x1f\x2e\x9e\x6e\xf2\xf3\x93\x53\x87\x9a\x3a\x2d\x0d\x9c\x9c\xfa\x06\x89\xa0\x5b\x95\xd3\x6c\xb3\x49\xaf\xf9\x41\x4b\xf3\x88\xd4\xf7\x53\x75\x80\xd5\xd0\xb4\x68\x5b\x6a\x57\x82\x0b\x84\xfe\xb0\x8e\x13\x78\x6a\x10\x2a\xe3\xbc\x80\x68\x57\xa3\x40\x89\x95\xb1\x58\x82\xf1\x20\x0d\xc6\xa3\x0e\x24\x60\x2a\xb0\xfc\xa6\x31\x5e\x25\xe0\x3b\x2c\x4c\x65\xb0\x04\xb6\x83\xb4\xe0\xb6\xd5\xb6\x04\x32\x16\x53\x80\x3b\xbd\x40\xf0\xc1\x21\x48\x63\x3c\x94\x8c\xde\x4e\x44\x25\x20\x31\x20\xcc\x40\x6c\x6b\x10\x06\x17\xec\x19\x78\x06\x69\xb4\x40\x87\xdc\x11\xc2\xca\x10\xc5\x00\x18\x89\xf5\x71\x89\x6e\xad\x12\x78\x0e\x86\xca\x54\xa5\x0f\x37\xf3\xfb\xef\x39\x54\xda\x8b\x8a\x8f\x7c\x8c\x40\xc1\x4b\x74\xba\xc6\x99\x6f\xe2\x2a\xc8\x58\x99\x0d\x22\x95\xc0\x05\x79\xde\xfe\xbc\xa1\xdf\xe3\x2a\x10\x41\xa5\xe5\x78\x18\xe1\x68\x1f\xdb\x1c\xdd\xa4\x31\xb6\xde\x39\x69\xa2\xd1\x42\x69\xa2\x8f\x6e\x5b\x9f\x40\xa4\xe2\x1e\x00\xfe\x47\x84\x46\xa4\xf3\x79\x96\xd5\xdc\x2d\xea\xd4\xd8\xac\xd5\x0b\x4c\x97\xff\x40\xc5\x0e\x34\x90\xf1\x02\x5c\x45\xf5\x12\x9d\x37\x6c\x3d\xc4\xe9\xc5\xb4\x77\x59\x83\xba\x65\x87\x60\x6c\xc5\xa9\x4a\xd4\xf5\xfc\xee\xe2\xf6\x2a\x3f\xff\x58\x57\x6d\x36\xb3\xb8\xa6\xf4\x12\xbb\xbe\xdf\xca\x7e\x7c\xbb\xba\xbf\x9c\x3f\xe6\xe7\x25\x76\x83\x00\x6d\xd9\xf7\x6a\x66\x6c\x41\xa1\x44\x38\x39\x1d\x69\x9d\x66\xde\x15\x59\x3c\xc5\xac\x69\xf6\xac\x45\xd0\x19\xf4\x69\xbb\x50\x9f\x89\xfe\xca\xd5\x51\xcd\x10\x89\xd8\x5f\xa6\x69\x7a\x28\xd1\x96\x57\x11\x07\x5d\x48\xd0\x44\xeb\xed\x90\xbd\x84\xaa\x8a\x55\xff\x80\xf0\xc9\x50\x6a\xb2\xe7\x17\x56\x0d\x3a\x84\x35\x07\x28\x82\x17\x6e\x8d\xc7\x61\xd4\x6b\x0e\x0e\x3a\xc7\x2f\x58\x48\xaa\x12\xf8\xcf\x8e\xf8\x7a\xd3\x46\x2c\xf1\x55\xc7\xef\x33\x58\xe1\x84\x08\x5e\x82\x17\x30\xd6\x8b\x8e\xab\x7f\x63\x65\xe4\x64\x78\xe6\xfb\xe8\x6e\x3d\x5c\x2c\xd0\xf5\xfd\x81\x43\x2a\x87\x74\xf0\xa1\x8b\x2f\x9b\xc3\x86\xb2\x65\xe3\x72\xfe\xef\xed\xd5\xe3\x3b\x92\x6a\x9e\x45\x98\xb2\xd1\x23\x5d\xfe\xfd\x3b\x50\xb6\x25\xa6\x59\xfc\xb3\x57\x86\xf0\x13\x56\x76\xba\x5f\x20\xb3\x8b\xc5\x1d\xef\x11\xfd\x19\x00\x00\xff\xff\x15\x32\xeb\x18\xca\x05\x00\x00")

func templatesMakefileTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesMakefileTpl,
		"templates/makefile.tpl",
	)
}

func templatesMakefileTpl() (*asset, error) {
	bytes, err := templatesMakefileTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/makefile.tpl", size: 1482, mode: os.FileMode(420), modTime: time.Unix(1506539637, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVscodeSettingsTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xc8\xb1\x0e\x82\x30\x10\x06\xe0\xd9\x3e\xc5\x9f\xc6\x44\x5d\x60\xf7\x05\x5c\x0d\x6f\x70\x29\x07\x57\x41\xae\x69\x4f\x09\x69\xfa\xee\x0e\xae\x5f\x75\x00\xd0\xf7\x30\x89\x05\xb1\x40\x68\x1b\x0f\xc4\x09\xd7\x35\x2e\x8c\x37\xdf\x70\xe8\xe7\x92\x19\x84\x6f\x09\x3a\x32\x26\xda\xb0\x8b\x42\xa8\x80\x30\x6b\x22\x13\x24\xce\x48\x59\x5f\x1c\xcc\x9d\xfc\xac\xdd\xdf\xfd\x1d\xfe\x5c\x77\xcd\x4b\x49\x14\x78\x50\xb5\xd6\xd7\xda\x3d\xf4\x49\x26\x03\xaf\xad\x79\xd7\xdc\x2f\x00\x00\xff\xff\x94\x6a\x60\xbe\x87\x00\x00\x00")

func templatesVscodeSettingsTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesVscodeSettingsTpl,
		"templates/vscode-settings.tpl",
	)
}

func templatesVscodeSettingsTpl() (*asset, error) {
	bytes, err := templatesVscodeSettingsTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vscode-settings.tpl", size: 135, mode: os.FileMode(420), modTime: time.Unix(1506539637, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/editorconfig.tpl": templatesEditorconfigTpl,
	"templates/gitignore.tpl": templatesGitignoreTpl,
	"templates/makefile.tpl": templatesMakefileTpl,
	"templates/vscode-settings.tpl": templatesVscodeSettingsTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"editorconfig.tpl": &bintree{templatesEditorconfigTpl, map[string]*bintree{}},
		"gitignore.tpl": &bintree{templatesGitignoreTpl, map[string]*bintree{}},
		"makefile.tpl": &bintree{templatesMakefileTpl, map[string]*bintree{}},
		"vscode-settings.tpl": &bintree{templatesVscodeSettingsTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

